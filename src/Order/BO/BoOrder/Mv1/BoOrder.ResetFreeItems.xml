<BusinessLogic methodName="resetFreeItems" businessObjectClass="BoOrder" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="orderItem" type="LiOrderItem" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[/** 
 * Resets free items related to the given order item (parentType: Item) 
 * OR related to the complete order (parentType: Order)
 * Should be used if ppp relevant order item attribute changed
 */

var promise = when.resolve();
var deferreds = [];
var parentPKey = orderItem.getPKey();
var items = me.getLoItems().getAllItems();
var length = items.length;
var origQty;

for (var index = 0; index < length; index++) {
  var item = items[index];

  // Remove free items linked to given order item (parent item)
  // OR of parent type "Order" (linked to the complete Order)
  // Free Items linked to the complete order must also be removed because the changed item might contribute to an overall order based or grouping based free item grant
  if (item.getSdoParentItemPKey() === parentPKey || item.getParentType() === "Order") {
    
    origQty = item.getQuantity();

    // First set the item deleted so that quantity changed allowed check is NOT executed in onOrderItemChanged handler
    deferreds.push(item.setDeletedFreeItem("1"));
    deferreds.push(item.setQuantity(0));
    // remove item from basket
    deferreds.push(item.setShowInBasket("0"));
    // update basket counter
    me.updateItemFilterBasketCount(item, origQty, 0);
    //Update counter for "All" Filter
    me.updateItemFilterCountAfterAdd();
    // update item in ppp engine
    deferreds.push(CP.PricingHandler.getInstance().updateProduct(item.getData(), "Quantity"));
  }
}
promise = when.all(deferreds);]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>